// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  Folder    Folder[]
  File      File[]
  SharedFolder  SharedFolder[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model Folder {
  id             Int             @id @default(autoincrement())
  name           String
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  parentFolderId Int?            // optional
  parentFolder   Folder?         @relation("Subfolders", fields: [parentFolderId], references: [id])
  subfolders     Folder[]        @relation("Subfolders")
  files          File[]
  sharedFolders  SharedFolder[]  // Change to one-to-many relation
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  size      Int
  folderId  Int?     // Make folderId optional to allow root-level files
  folder    Folder?  @relation(fields: [folderId], references: [id]) // Make folder relation optional
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  url       String
  createdAt DateTime @default(now())
}

model SharedFolder {
  id        String   @id @default(uuid())
  folderId  Int      
  folder    Folder   @relation(fields: [folderId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
